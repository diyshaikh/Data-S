#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct stack
{
    int size;
    int top;
    char *arr;
};

int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void push(struct stack* ptr, char val){
    if(isFull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}

char pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

char stackTop(struct stack* sp){
    return sp->arr[sp->top];
}

int match(char a, char b){
    if(a=='{' && b=='}'){
        return 1;
    }
    if(a=='(' && b==')'){
        return 1;
    }
    if(a=='[' && b==']'){
        return 1;
    }
  return 0;
}

int parenthesisMatch(char * exp){
    // Create and initialize the stack
    struct stack* sp;
    sp->size = 100;
    sp->top = -1;
    sp->arr = (char *)malloc(sp->size * sizeof(char));
    char popped_ch;

    for (int i = 0; exp[i]!='\0'; i++)
    {
        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='['){
            push(sp, exp[i]);
        }
        else if(exp[i]==')'|| exp[i]=='}' || exp[i]==']'){
            if(isEmpty(sp)){
                return 0;
            }
            popped_ch = pop(sp);
            if(!match(popped_ch, exp[i])){
              return 0;
            }
        }
    }

    if(isEmpty(sp)){
        return 1;
    }
    else{
        return 0;
    }

}



int isOperator(char ch)
{
    if(ch=='+' || ch=='-' ||ch=='*' || ch=='/')
    {
        return 1;
    }
}

int precedence(char ch)
{
    if(ch=='*' || ch=='/')
    {
        return 3;
    }
    else if(ch=='+' || ch=='-')
    {
        return 2;
    }
}
char *convert(char*infix)
{
    struct stack *sp =(struct stack *) malloc(sizeof(struct stack));
    sp->size =10;
    sp->top=-1;
    sp-> arr = (char*) malloc(sp-> size *sizeof(char));
    char *postfix = (char*) malloc((strlen(infix +1))*sizeof(char));
    int i=0;
    int j=0;
    while (infix[i]!='\0')
       {
        if(!isOperator(infix[i])){
            postfix[j] = infix[i];
            j++;
            i++;
        }
        else{
            if(precedence(infix[i])> precedence(stackTop(sp))){
                push(sp, infix[i]);
                i++;
            }
            else{
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    while(!isEmpty(sp))
    {
        postfix[j]=pop(sp);
        j++;
    }
    postfix[j]= '\0';
    return postfix;

}


int main()
{ char *exp,arr[30];
    exp = &arr[0];
    int n ;
    int i;
    printf("Select one of the options:\n1.Balanced Parenthesis\n2.Infix to Postfix\n3.Exit\n");
    scanf("%d",&n);
    switch(n)
    {
        case 1:
        printf("Enter the expression : ");
    scanf("%s", exp);
    if (parenthesisMatch(exp))
     {
        printf("The parenthesis are balanced\n");
     }
    else
     {
        printf("The parenthesis are not balanced\n");
     }
        break;
        case 2:
         printf("enter the expression :- ");
         char i[20];
         scanf("%s",i); 
         printf("postfix is %s", convert(i));
         return 0;
     case 3: 
        exit(3);
         return 0;
    }
    
}

